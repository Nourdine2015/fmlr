#'
#' @param
#'
#' @examples
#' train_class <- c(1223,1322,1144)
#' test_class <- c(345,544,233)
#' my_acc <- 0.45
#' acc_lucky(train_class, test_class, my_acc)
#'
#' @export
acc_lucky <- function(train_class, test_class, my_acc, s=1000)
{
acc_random_guess <- acc_educated_guess <- NULL
nTrain_class <- length(train_class)
nTest_class <- length(test_class)
nTrain <- sum(train_class)
nTest <- sum(test_class)
if(nTrain_class!=nTest_class) stop("Error: The number of classes in test and train sets are different!")
true_class <- unlist(sapply(seq_len(nTrain_class), function(i){rep(i, test_class[i])}))
random_guess <- sample(1:nTrain_class, nTest*s, replace = T)
random_guess <- matrix(random_guess, s, nTest)
educated_guess <- sample(1:nTrain_class, nTest*s, prob = train_class/nTrain, replace = T)
educated_guess <- matrix(educated_guess, s, nTest)
acc_random_guess <- apply(random_guess, 1, function(xvec){sum(true_class == xvec) / nTest})
acc_educated_guess <- apply(educated_guess, 1, function(xvec){sum(true_class == xvec) / nTest})
acc_majority_guess <- sum(true_class == rep(which.max(train_class), nTest)) / nTest
# one-side p value
p_random_guess <- sum(my_acc <= acc_random_guess)/length(acc_random_guess)
p_educated_guess <- sum(my_acc <= acc_educated_guess)/length(acc_educated_guess)
return(list(my_accuracy=my_acc,
p_random_guess=p_random_guess,
p_educated_guess=p_educated_guess,
mean_random_guess=mean(acc_random_guess),
mean_educated_guess=mean(acc_educated_guess),
acc_majority_guess=acc_majority_guess))
}
train_class <- c(1223,1322,1144)
test_class <- c(345,544,233)
my_acc <- 0.45
acc_lucky(train_class, test_class, my_acc)
train_class <- c(1223,1322)
test_class <- c(345,544)
my_acc <- 0.54
acc_lucky(train_class, test_class, my_acc)
set.seed(1)
dat <- data.frame(Price = c(rep(0.5, 4), runif(50)))
#'
#' @examples
#'
#' set.seed(1)
#' dat <- data.frame(Price = c(rep(0.5, 4), runif(50)))
#' T_tib <- Tstar_trb(dat)
#' b_t <- imbalance_tick(dat)
#' cumsum(b_t)[cumsum(T_tib)] # check the accumulated b_t's where the imbalances occur
#'
#' @export
Tstar_trb <- function(dat, w0=10, bkw_T=5, bkw_Pb1=5)
{
b_t <- imbalance_tick(dat)
nb <- length(b_t)
nx <- dim(dat)[1]
# calculate the length of the 1st run
th_T <- sapply(1:nb, function(i){
b_t_tmp <- b_t[1:i]
if(sum(b_t_tmp %in% c(-1,1))==0){out <- 0}else
{
out <- max(cumsum(b_t_tmp[b_t_tmp==1]), -cumsum(b_t_tmp[b_t_tmp==-1]))
}
out
})
w0 <- max(min(which(th_T != 0)), w0) # fix the case when there are always 0 at the beginning
w0 <- max(min(which(b_t==1)), w0) # there must be at least 1 b_t = 1 during the first window
Tvec <- w0
E0T <- T_last <- Tvec
Pb1 <- sum(b_t[1:w0]==1) / w0 # Pb1: Pr[b_t = 1]
Pb1vec <- Pb1
th_T_Expected <- E0T*max(Pb1, 1-Pb1)
while(T_last<nx)
{
T_last <- sum(Tvec) # the last T that has been calculated
# cat("T_last: ", T_last, "\n")
for(j in 1:(nb-T_last-1))
{
b_t_tmp <- b_t[(T_last+1):(T_last+j)]
if(sum(b_t_tmp %in% c(-1,1))==0){th_T_tmp <- 0}else
{
th_T_tmp <- max(cumsum(b_t_tmp[b_t_tmp==1]), -cumsum(b_t_tmp[b_t_tmp==-1]))
}
if(th_T_tmp >= th_T_Expected)
{
new_flag <- TRUE # new window generated!
T_new <- j
Tvec <- c(Tvec, T_new)
T_last <- T_last + T_new
Pb1_new <- sum(b_t_tmp==1) / j
Pb1vec <- c(Pb1vec, Pb1_new)
break
}
}
if(new_flag==TRUE)
{
new_flag <- FALSE
nTvec <- length(Tvec) # nTvec should be the same as nPb1vec
if(nTvec <= 2)
{
E0T <- mean(Tvec) # not enough T for exponential weighted average, so use the mean
Pb1 <- mean(Pb1vec)
}else
{
nT <- min(bkw_T, length(Tvec)-1)
E0T <- pracma::movavg(Tvec[(nTvec-nT):nTvec], n=nT, type = "e")
E0T <- E0T[length(E0T)]
nPb1 <- min(bkw_Pb1, length(Tvec)-1)
Pb1 <- pracma::movavg(Pb1vec[(nTvec-nPb1):nTvec], n=nPb1, type = "e")
Pb1 <- Pb1[length(Pb1)]
}
th_T_Expected <- E0T*max(Pb1, 1-Pb1)
}else{break}
}
return(Tvec)
}
T_tib <- Tstar_trb(dat)
#'
#' @param dat dat input with at least the following columns: Price
#' @examples
#'
#' set.seed(1)
#' dat <- data.frame(Price = c(rep(0.5, 4), runif(10)))
#'
#' b_t <- imbalance_tick(dat)
#'
#' @export
imbalance_tick <- function(dat)
{
n <- length(dat$Price)
imbalance <- rep(0, n)
price_diff <- diff(dat$Price)
for(i in 2:n)
{
imbalance[i] <- sign(price_diff[i-1])*(price_diff[i-1]!=0) + imbalance[i-1]*(price_diff[i-1]==0)
}
imbalance
}
T_tib <- Tstar_trb(dat)
T_tib
T_trb <- Tstar_trb(dat)
b_t <- imbalance_tick(dat)
cumsum(b_t)[cumsum(T_trb)] # check the accumulated b_t's where the imbalances occur
dat
cumsum(b_t)[cumsum(T_trb)] # check the accumulated b_t's where the imbalances occur
cumsum(T_trb)
